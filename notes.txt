this was in lisp.lua and clearly doesn't belong there
but maybe the thought was useful:
-- also need outputs for:
    -- MIDI
    -- synth
    -- softcut
    -- crow
    -- UI

ton of commented out logging in the lens event handler.
(in _midi.lua)
and some empty if blocks, etc.
this was right before this line:
    local mode_spec = spec[lens_mode] or spec.default

-- print('looking up mode '..lens_mode..' in:')
-- print(Utils.table_to_string(spec))
if not spec[lens_mode] then
    -- print('it was not found! reverting to default')
end

this was inside the subsequent if block:
-- print('no lens message found. falling back to regular MIDI')
-- print('nil spec!') -- real noisy

and this was right after that:
--print('lens short name')
-- print(short_name)
-- print('lens mode')
-- print(lens_mode)
-- print('spec:')
--local mode_spec = spec[lenses[short_name].mode or 'default']
--print('mode_spec type '..type(mode_spec))
--print('mode_spec n type '..type(mode_spec.n))
-- print(Utils.table_to_string(mode_spec))
-- print('mode_spec message_type '..((mode_spec and mode_spec.message_type) or '(nil)'))

this was at the top of lens_to_midi:
-- print("message_type = "..env.message_type)
-- print("origin = "..env.origin)
-- print("n = "..env.n)
-- print("v = "..env.v)

-- it's pretty tacky to assume "n" or "v" I guess
-- it should really depend on the MIDI msg type being lensed
-- if (not env.n) or (not env.v) or (type(env.message_type) ~= 'string') then


these were just not used:
local function is_lensed (id)
    return lensed_ports[id] ~= nil
end

local function tx_lens_event (event)
    return false -- fall back to regular MIDI event
end
